#ifndef NODE_KIND_T_H
#define NODE_KIND_T_H

typedef enum
{
  NODE_ABSTRACT_DECLARATOR,
  NODE_ADDITIVE_EXPRESSION,
  NODE_ALIGNMENT_SPECIFIER,
  NODE_AND_EXPRESSION,
  NODE_ARGUMENT_EXPRESSION_LIST,
  NODE_ASSIGNMENT_EXPRESSION,
  NODE_ASSIGNMENT_OPERATOR,
  NODE_ATOMIC_TYPE_SPECIFIER,
  NODE_BLOCK_ITEM_LIST,
  NODE_BLOCK_ITEM,
  NODE_CAST_EXPRESSION,
  NODE_COMPOUND_STATEMENT,
  NODE_CONDITIONAL_EXPRESSION,
  NODE_CONSTANT,
  NODE_CONSTANT_EXPRESSION,
  NODE_DECLARATION_LIST,
  NODE_DECLARATION_SPECIFIERS,
  NODE_DECLARATION,
  NODE_DECLARATOR,
  NODE_DESIGNATION,
  NODE_DESIGNATOR_LIST,
  NODE_DESIGNATOR,
  NODE_DIRECT_ABSTRACT_DECLARATOR,
  NODE_DIRECT_DECLARATOR,
  NODE_ENUM_SPECIFIER,
  NODE_ENUMERATION_CONSTANT,
  NODE_ENUMERATOR_LIST,
  NODE_ENUMERATOR,
  NODE_EQUALITY_EXPRESSION,
  NODE_EXCLUSIVE_OR_EXPRESSION,
  NODE_EXPRESSION,
  NODE_EXPRESSION_STATEMENT,
  NODE_EXTERNAL_DECLARATION,
  NODE_FUNCTION_DEFINITION,
  NODE_FUNCTION_SPECIFIER,
  NODE_IDENTIFIER_LIST,
  NODE_INCLUSIVE_OR_EXPRESSION,
  NODE_INITIALIZER_LIST,
  NODE_INITIALIZER,
  NODE_INIT_DECLARATOR_LIST,
  NODE_INIT_DECLARATOR,
  NODE_ITERATION_STATEMENT,
  NODE_JUMP_STATEMENT,
  NODE_LABELED_STATEMENT,
  NODE_MULTIPLICATIVE_EXPRESSION,
  NODE_LOGICAL_AND_EXPRESSION,
  NODE_LOGICAL_OR_EXPRESSION,
  NODE_PARAMETER_DECLARATION,
  NODE_PARAMETER_LIST,
  NODE_PARAMETER_TYPE_LIST,
  NODE_POINTER,
  NODE_POSTFIX_EXPRESSION,
  NODE_PRIMARY_EXPRESSION,
  NODE_RELATIONAL_EXPRESSION,
  NODE_SELECTION_STATEMENT,
  NODE_SHIFT_EXPRESSION,
  NODE_SPECIFIER_QUALIFIER_LIST,
  NODE_STATEMENT,
  NODE_STATIC_ASSERT_DECLARATION,
  NODE_STORAGE_CLASS_SPECIFIER,
  NODE_STRING,
  NODE_STRUCT_DECLARATION_LIST,
  NODE_STRUCT_DECLARATION,
  NODE_STRUCT_DECLARATOR_LIST,
  NODE_STRUCT_DECLARATOR,
  NODE_STRUCT_OR_UNION,
  NODE_STRUCT_OR_UNION_SPECIFIER,
  NODE_TRANSLATION_UNIT,
  NODE_TYPE_SPECIFIER,
  NODE_TYPE_QUALIFIER_LIST,
  NODE_TYPE_QUALIFIER,
  NODE_TYPE_NAME,
  NODE_UNARY_EXPRESSION,
  NODE_UNARY_OPERATOR
} node_kind_t;

#endif
